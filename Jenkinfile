pipeline {
    agent{
        label 'my-agent-1'
    }
    tools{
        terraform 'terraform'
        ansible 'ansible'
        
    }
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }
    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }     
    stages {
        stage('checkout') {
            steps {
                 script{
                        dir("terraform")
                        {
                            git branch: 'future_branch', url: 'https://github.com/Sameerpatlekar/terraform_Project.git'
                        }
                    }
                }
            }
        stage('Plan') {
            steps {
                sh 'pwd;cd terraform/ ; terraform init'
                sh "pwd;cd terraform/ ; terraform plan -out tfplan "
                sh 'pwd;cd terraform/ ; terraform show -no-color tfplan > tfplan.txt'
            }
        }
        stage('Approval') {
           when {
               not {
                   equals expected: true, actual: params.autoApprove
               }
           }

           steps {
               script {
                    def plan = readFile 'terraform/tfplan.txt'
                    input message: "Do you want to apply the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
               }
           }
       }

        stage('Apply') {
            steps { 
                  sh 'pwd;cd terraform/ ; terraform apply -input=false tfplan'
            }
        }
        stage('Apply') {
            steps { 
                  ansiblePlaybook credentialsId: 'jenkins-private-access', disableHostKeyChecking: true, installation: 'ansible', inventory: 'terraform/inventory.ini', playbook: 'terraform/ansible_script/main_playbook.yml', vaultCredentialsId: 'vault-password', vaultTmpPath: 'terraform/ansible_script/'
            }
        }
    }
    post {
        success {
            echo 'Build was successful, cleaning workspace...'
            cleanWs()
        }
        failure {
            echo 'Build failed, not cleaning workspace.'
        }
    }
}
